#端口号
server.port=8081
#项目路径
server.servlet.context-path=/

#mysql数据库
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://39.97.173.224:3306/mapping?useSSL=false&characterEncoding=utf8
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.username=root
spring.datasource.password=123456


#此项目为后台管理系统，所以数据库中会有一些常用的数据，角色数据，菜单数据，字典数据之类的。。
#当springboot项目启动的时候，就会初始化数据库，自动的创建表以及加载数据
#官方推荐使用 spring.datasource.schema 初始化表，表中没有数据‘
#使用spring.datasource.data 初始化表中的数据
#但是经过测试，使用spring.datasource.schema 既可以初始化表还可以加载表中的数据
spring.datasource.schema=classpath:sql/mapping.sql

#always：总是会加载，项目启动之后就会加载(只有第一次启动才会加载)
#never：永远都不会加载，无论项目启动多少次都不会再加载这个sql文件了
#embedded:初始化内存数据库(eg:redis),初始化的是非关系型数据库
spring.datasource.initialization-mode=never

#映射的model和Mapper.xml包的路径
mybatis.type-aliases-package=com.mmz.model
mybatis.mapper-locations=classpath:mapper/*Mapper.xml
#让通用mapper直接遵循驼峰规则，不需要在实体类中使用@Column注解来标识
mybatis.configuration.map-underscore-to-camel-case=true


#关于通用mapper的常用配置
#配置自增主键的策略(可以不用配置，默认支持的就是mysql)
mapper.identity=MYSQL
#配置通用mapper的通用类
mapper.mappers=tk.mybatis.mapper.common.Mapper
#配置在执行insert或者update操作，是否需要判断字符串的类型
#eg : update set user where 1=1 <if test"username != null"> and username = #{username} </if>
#这种配置的好处就是传递参数的时候才执行更新操作，如果没有传递则不需要执行
#配置之后eg就可以直接写成 update set user username = #{username}
mapper.not-empty=true
#项目中会大量的使用枚举类型，所以需要在通用mapper中把枚举类型转换为简单类型进行处理
mapper.enum-as-simple-type=true

#配置github开源的分页插件
pagehelper.helper-dialect=mysql
pagehelper.params=count=countSql
pagehelper.reasonable=false
pagehelper.support-methods-arguments=true


#服务名 在熔断的时候配置的
spring.application.name=system-interface

#配置eureka集群的命名空间，这里需要和eureka集群配置的命名空间一模一样
eureka.client.service-url.defaultZone=http://eureka01:7081/eureka,http://eureka02:7082/eureka,http://eureka03:7083/eureka
#配置在eureka集群中的实例id(名称)
eureka.instance.instance-id=system-interface-8081

#配置服务的信息提供查看
info.app.name=interface-system-provider
info..app.port=8081
info.author.name=Liu Xinpeng
inf0.company.name=mmz



